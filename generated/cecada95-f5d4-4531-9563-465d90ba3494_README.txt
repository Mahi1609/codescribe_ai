# üëã Welcome to cecada95-f5d4-4531-9563-465d90ba3494

üìÑ *This documentation was automatically generated by [CodeScribe AI](https://github.com/Mahi1609/codescribe_ai.git)*

---

## üß† Overview
### Code File Summaries

The project is a Python-based invoice extraction tool utilizing Optical Character Recognition (OCR) and a local Ollama Large Language Model (LLM). The primary entry point, `main.py`, orchestrates the extraction process by:
* Extracting text from PDF files using the `ocr_handler` module
* Preprocessing the extracted text with the `text_cleaner` utility
* Sending the cleaned text to the Ollama model for invoice field generation
* Saving the structured output to a JSON file

Key dependencies include the `ocr_handler`, `ollama_parser`, and `text_cleaner` modules, which are crucial for the project's functionality. The project's purpose is to automate the extraction of invoice fields from PDF files, providing a structured output for further processing or analysis.

---

## üîç What Does This Project Do?
This project is designed to ### Code File Summaries

#### PROJECT_PURPOSE
This project is a Python-based invoice extraction tool utilizing Optical Character Recognition (OCR) and a local Ollama Large Language Model (LLM) to extract structured invoice fields from PDF files.

#### main.py
**Purpose:** Extract invoice fields from PDF files using OCR and a local Ollama LLM.
**Key Functions:**
* `main(pdf_path)`: The primary entry point for the script, responsible for orchestrating the extraction process.
**Inputs:**
* `pdf_path`: The path to the PDF file to extract invoice fields from.
**Outputs:**
* A JSON file containing the extracted invoice fields, saved to the "output" directory.
**Side-Effects:**
* Creates the "output" directory if it does not exist.
* Prints intermediate results and progress updates to the console.
**Important Dependencies:**
* `ocr_handler.py`: Provides the `extract_text_from_pdf` function for OCR extraction.
* `ollama_parser.py`: Provides the `generate_invoice_fields` function for LLM-based field extraction.
* `text_cleaner.py`: Provides the `clean_ocr_text` function for preprocessing the extracted text.
**Framework Patterns:**
* Utilizes a modular design, with separate modules for OCR extraction, LLM-based field extraction, and text preprocessing.
* Employs a simple command-line interface, with the `main` function serving as the entry point. 

Some key points about the code:
* The script takes a PDF file path as input and extracts the text using OCR.
* The extracted text is then preprocessed and sent to a local Ollama model for field extraction.
* The extracted fields are printed to the console and saved to a JSON file.
* The script uses a modular design, with separate modules for OCR extraction, LLM-based field extraction, and text preprocessing. 

Note: The code seems to be designed to work with a specific Ollama LLM model, and the `ollama_parser.py` module is not shown in the provided code snippet. The exact behavior of the script may depend on the implementation of this module.

---

## üõ† Tech Stack Used
- **Detected Environment:** `python`
- **Languages & Frameworks:**


  - Python

  - Node

  - System



---

## üì¶ Dependencies


### Python


- PIL

- fitz

- llm

- ocr

- pytesseract

- requests



### Node

- No dependencies detected


### System


- Install Ollama from https://ollama.ai (required for running local LLMs).

- Install Tesseract OCR (e.g., `sudo apt-get install tesseract-ocr`).







---

## ‚öôÔ∏è Installation & Run
To get started with this project:

### Clone the repository
```bash
git clone <your-repo-url>
cd cecada95-f5d4-4531-9563-465d90ba3494
```

### (Optional) Create a virtual environment
```bash
python -m venv venv
source venv/bin/activate   # On Windows: venv\Scripts\activate
```

### Install dependencies

```bash
pip install -r requirements.txt
```


### How to run
```bash
## Clone the repository
git clone <your-repo-url>
cd cecada95-f5d4-4531-9563-465d90ba3494

## Install dependencies
pip install -r requirements.txt

## Run the app
python main.py
```

---

## üß© Code File Summaries

### üìÑ `debug_ocr.py`
### Code File Summaries

#### debug_ocr.py
* **Purpose:** Extract and display text from a PDF file using Optical Character Recognition (OCR) techniques.
* **Key Functions:**
  + `debug_ocr(pdf_path)`: Extracts text from a PDF file and prints it to the console.
  + `extract_text_from_pdf(pdf_path)` (imported from `ocr.ocr_handler`): Performs the actual OCR operation.
* **Inputs/Outputs:**
  + Input: PDF file path (`pdf_path`) as a command-line argument.
  + Output: Extracted text from each page, truncated to 1000 characters per page, printed to the console.
* **Side-Effects:**
  + Prints usage instructions if `pdf_path` is not provided.
  + Prints extracted text to the console for debugging purposes.
* **Dependencies:**
  + Custom `ocr.ocr_handler` module.
  + Likely depends on OCR libraries like `pytesseract` and `fitz`.
* **Usage:** Run with `python debug_ocr.py <pdf_path>`, ensuring `ollama` and `tesseract-ocr` are installed and configured.


### üìÑ `main.py`
### Code File Summaries: main.py

The `main.py` script extracts invoice fields from a given PDF file using Optical Character Recognition (OCR) and a local Ollama Large Language Model (LLM). 

**Key Components:**
* Orchestrates invoice extraction via `main(pdf_path)`
* Utilizes OCR for text extraction from PDFs
* Employs Ollama model for structured invoice field generation
* Preprocesses OCR-extracted text for improved accuracy

**Input and Output:**
* Input: PDF file path as a command-line argument
* Outputs: 
  + Structured invoice fields
  + JSON file containing raw Ollama model output and structured invoice fields

**Side-Effects:**
* Creates an `output` directory if it does not exist
* Saves extracted invoice fields to a JSON file in the `output` directory

**Dependencies:**
* Python libraries: `PIL`, `fitz`, `llm`, `ocr`, `pytesseract`, `requests`
* Ollama Large Language Model (from https://ollama.ai)
* Tesseract OCR (installed via `sudo apt-get install tesseract-ocr`)

**Usage:**
Run the script with `python main.py <path_to_pdf>`, replacing `<path_to_pdf>` with the desired PDF file path.


### üìÑ `llm/ollama_parser.py`
### Code File Summaries

#### `llm/ollama_parser.py`

* **Purpose:** Extract structured information from invoice text using a local LLM API.
* **Key Functions:**
  + `generate_invoice_fields(text)`: Extracts relevant fields from invoice text via the local LLM API.
* **Inputs/Outputs:**
  + Input: `text` (invoice text)
  + Outputs: 
    - `json_data` (dictionary containing extracted invoice fields)
    - `raw_output` (raw LLM API response or error message)
* **Side-Effects:**
  + Sends a POST request to the local LLM API at `http://localhost:11434/api/generate`
  + Returns a dictionary with default empty values and an error message if the API request fails
* **Important Dependencies:**
  + `requests` library
  + Local LLM API (requires Ollama installation and "mistral" model)
* **Behavior and Intent:**
  + Extracts specific invoice fields (e.g., ID, dates, amounts, supplier information, line items) using the local LLM API.
  + Handles missing fields, API request exceptions, and JSON parsing errors, returning default values and error information as needed.


### üìÑ `ocr/ocr_handler.py`



### üìÑ `utils/text_cleaner.py`


